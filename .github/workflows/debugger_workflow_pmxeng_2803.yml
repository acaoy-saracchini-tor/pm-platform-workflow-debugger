# McKinsey PriceMetrix Co. – Confidential – For Authorized Use and Disclosure Only

# GitHub Actions workflow to continuously test the solutions/projects within the repositories on every push to GitHub.
name: Continuous End To End Testing

# Run the workflow when the Continuous Delivery workflow completes.
on:
  push:
    branches:
      - '**'
  
# Concurrency can't use environment variables.
concurrency:
  group: group-${{ 
    startsWith(fromJSON(github.event.inputs.parameters_json).source_branch, vars.BRANCH_STG1) && 'STG-1' || 
    startsWith(fromJSON(github.event.inputs.parameters_json).source_branch, vars.BRANCH_STG2) && 'STG-2' || 
    startsWith(fromJSON(github.event.inputs.parameters_json).source_branch, vars.BRANCH_STG3) && 'STG-3'
    }}

env:
  ENVIRONMENT_NAME: ${{
    startsWith(fromJSON(github.event.inputs.parameters_json).source_branch, vars.BRANCH_STG1) && 'STG-1' ||
    startsWith(fromJSON(github.event.inputs.parameters_json).source_branch, vars.BRANCH_STG2) && 'STG-2' ||
    startsWith(fromJSON(github.event.inputs.parameters_json).source_branch, vars.BRANCH_STG3) && 'STG-3'
    }}

# Set the display name for the workflow run from the value provided in the client payload.
# Default to the workflow name and source branch if not provided.
run-name: ${{ fromJSON(github.event.inputs.parameters_json).target_run_name != '' && fromJSON(github.event.inputs.parameters_json).target_run_name || github.workflow }}


jobs:

  preparation:
    name: Prepare By Making Environment Variables Global
    runs-on: self-hosted
    environment: ${{
      startsWith(fromJSON(github.event.inputs.parameters_json).source_branch, vars.BRANCH_STG1) && 'STG-1' ||
      startsWith(fromJSON(github.event.inputs.parameters_json).source_branch, vars.BRANCH_STG2) && 'STG-2' ||
      startsWith(fromJSON(github.event.inputs.parameters_json).source_branch, vars.BRANCH_STG3) && 'STG-3'
      }}
    outputs:
        validation_enabled: ${{ steps.init.outputs.validation_enabled }}
    steps:
      - name: Add repository variables to summary
        shell: powershell
        run: |
          "### Repository Variables Values" >> $env:GITHUB_STEP_SUMMARY
          "- BRANCH_STG1: ${{ vars.BRANCH_STG1 }}" >> $env:GITHUB_STEP_SUMMARY
          "- BRANCH_STG2: ${{ vars.BRANCH_STG2 }}" >> $env:GITHUB_STEP_SUMMARY
          "- BRANCH_STG3: ${{ vars.BRANCH_STG3 }}" >> $env:GITHUB_STEP_SUMMARY
      - name: Validate Environment Variable
        shell: powershell
        run: |
          if (-not ($env:ENVIRONMENT_NAME -eq "STG-1" -or $env:ENVIRONMENT_NAME -eq "STG-2" -or $env:ENVIRONMENT_NAME -eq "STG-3")) {
            Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "### Error setting environment :x:"
            Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "A branch that is being used is not being targeted to any environment: Update the BRANCH_STGX repository variable that best applies to this merge."
            exit 1
          }
      - name: Show Environment
        shell: powershell
        run: |
          "### Environment" >> $env:GITHUB_STEP_SUMMARY
          "ENVIRONMENT_NAME: ${{ env.ENVIRONMENT_NAME }}" >> $env:GITHUB_STEP_SUMMARY
      - name: Make environment variables global 
        id: init
        run: |
            Write-Output "validation_enabled=${{ vars.VALIDATION_ENABLED }}" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append


  daytime-dataload:
    name: Run Daytime Databuild
    needs: preparation
    runs-on: self-hosted
    environment: ${{
      startsWith(fromJSON(github.event.inputs.parameters_json).source_branch, vars.BRANCH_STG1) && 'STG-1' ||
      startsWith(fromJSON(github.event.inputs.parameters_json).source_branch, vars.BRANCH_STG2) && 'STG-2' ||
      startsWith(fromJSON(github.event.inputs.parameters_json).source_branch, vars.BRANCH_STG3) && 'STG-3'
      }}
    steps:
      # Step to checkout DevOps repository source code from GitHub into the runner.
      - name: Checkout DevOps repository source code
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.DEVOPS_REPO }}
          token: ${{ secrets.DEVOPS_REPO_PAT }}
          path: ./devops-repo

      # Step to Run Stage Fiona Industry Data
      - name: Run Stage Fiona Industry Data
        shell: pwsh
        run: ./devops-repo/Automated-Databuild/ExecuteSQL.ps1 -sqlusername ${{ secrets.DEVOPS_SQL_DEPLOYACCT }} -sqlpassword ${{ secrets.DEVOPS_SQL_DEPLOYACCT_PAT }} -serverInstance '${{ vars.DATABASE_SERVER }}' -database "Varuna" -query "EXEC [dbo].[usp_RunDataLoad] 0,${{ vars.DATA_BUILD_PERIOD }},'Stage Fiona Industry Data',NULL,${{ vars.BUILD_TIMEOUT }},1"
      
      # Step to Monthly Data Load For Firm 21
      - name: Run Monthly Data Load For Firm 21
        shell: pwsh
        run: ./devops-repo/Automated-Databuild/ExecuteSQL.ps1 -sqlusername ${{ secrets.DEVOPS_SQL_DEPLOYACCT }} -sqlpassword ${{ secrets.DEVOPS_SQL_DEPLOYACCT_PAT }} -serverInstance '${{ vars.DATABASE_SERVER }}' -database "Varuna" -query "EXEC [dbo].[usp_RunMonthlyDataLoad] '${{ vars.DAYTIME_FIRMS_TO_RUN }}',${{ vars.DATA_BUILD_PERIOD }},${{ vars.BUILD_TIMEOUT }},${{ vars.DATA_BUILD_STAGGER_MINUTES }},1"


  postprocessing-dataload:
    name: Run Post Processing Dataload
    needs: daytime-dataload
    runs-on: self-hosted
    environment: ${{
      startsWith(fromJSON(github.event.inputs.parameters_json).source_branch, vars.BRANCH_STG1) && 'STG-1' ||
      startsWith(fromJSON(github.event.inputs.parameters_json).source_branch, vars.BRANCH_STG2) && 'STG-2' ||
      startsWith(fromJSON(github.event.inputs.parameters_json).source_branch, vars.BRANCH_STG3) && 'STG-3'
      }}
    steps:
      # Step to Run Post Processing - Publish V1 Record
      - name: Run Post Processing - Publish V1 Record
        shell: pwsh
        run: |
          $firms = '${{ vars.DAYTIME_FIRMS_TO_RUN }}'.Split(',')
          foreach ($firm in $firms) {
            ./devops-repo/Automated-Databuild/ExecuteSQL.ps1 -sqlusername ${{ secrets.DEVOPS_SQL_DEPLOYACCT }} -sqlpassword ${{ secrets.DEVOPS_SQL_DEPLOYACCT_PAT }} -serverInstance '${{ vars.DATABASE_SERVER }}' -database "Varuna" -query "EXEC [dbo].[usp_RunDataLoad] $firm,${{ vars.DATA_BUILD_PERIOD }},'Publish and Archive RWB','Publish V1 Record',${{ vars.BUILD_TIMEOUT }},1"
          }

      # Step to Run Post Processing - Publish PR Record
      - name: Run Post Processing - Publish PR Record
        shell: pwsh
        run: |
          $firms = '${{ vars.DAYTIME_FIRMS_TO_RUN }}'.Split(',')
          foreach ($firm in $firms) {
            ./devops-repo/Automated-Databuild/ExecuteSQL.ps1 -sqlusername ${{ secrets.DEVOPS_SQL_DEPLOYACCT }} -sqlpassword ${{ secrets.DEVOPS_SQL_DEPLOYACCT_PAT }} -serverInstance '${{ vars.DATABASE_SERVER }}' -database "Varuna" -query "EXEC [dbo].[usp_RunDataLoad] $firm,${{ vars.DATA_BUILD_PERIOD }},'Publish and Archive RWB','Publish PR Record',${{ vars.BUILD_TIMEOUT }},1"
          }

      # Step to Run Post Processing - Publish Fiona
      - name: Run Post Processing - Publish Fiona
        shell: pwsh
        run: |
          $firms = '${{ vars.DAYTIME_FIRMS_TO_RUN }}'.Split(',')
          foreach ($firm in $firms) {
            ./devops-repo/Automated-Databuild/ExecuteSQL.ps1 -sqlusername ${{ secrets.DEVOPS_SQL_DEPLOYACCT }} -sqlpassword ${{ secrets.DEVOPS_SQL_DEPLOYACCT_PAT }} -serverInstance '${{ vars.DATABASE_SERVER }}' -database "Varuna" -query "EXEC [dbo].[usp_RunDataLoad] $firm,${{ vars.DATA_BUILD_PERIOD }},'Publish and Archive RWB','Publish Fiona',${{ vars.BUILD_TIMEOUT }},1"
          }

      # Step to Run Blazon Market Build for firm 1001
      - name: Run Blazon Market Build - Market 1001
        shell: pwsh
        run: ./devops-repo/Automated-Databuild/ExecuteSQL.ps1 -sqlusername ${{ secrets.DEVOPS_SQL_DEPLOYACCT }} -sqlpassword ${{ secrets.DEVOPS_SQL_DEPLOYACCT_PAT }} -serverInstance '${{ vars.DATABASE_SERVER }}' -database "Varuna" -query "EXEC [dbo].[usp_RunDataLoad] 1001,${{ vars.DATA_BUILD_PERIOD }},'Blazon Market Build',NULL,${{ vars.BUILD_TIMEOUT }},1"

      # Step to Run Post Blazon Market V1 for firm 1001
      - name: Run Post Blazon Market V1 - Market 1001
        shell: pwsh
        run: ./devops-repo/Automated-Databuild/ExecuteSQL.ps1 -sqlusername ${{ secrets.DEVOPS_SQL_DEPLOYACCT }} -sqlpassword ${{ secrets.DEVOPS_SQL_DEPLOYACCT_PAT }} -serverInstance '${{ vars.DATABASE_SERVER }}' -database "Varuna" -query "EXEC [dbo].[usp_RunDataLoad] 1001,${{ vars.DATA_BUILD_PERIOD }},'Post Blazon Market V1','Blazon subset - Copy new build',${{ vars.BUILD_TIMEOUT }},1"

      # Step to Publish and Archive ML US Market for firm 1001
      - name: Run Publish and Archive ML US Market - Market 1001
        shell: pwsh
        run: ./devops-repo/Automated-Databuild/ExecuteSQL.ps1 -sqlusername ${{ secrets.DEVOPS_SQL_DEPLOYACCT }} -sqlpassword ${{ secrets.DEVOPS_SQL_DEPLOYACCT_PAT }} -serverInstance '${{ vars.DATABASE_SERVER }}' -database "Varuna" -query "EXEC [dbo].[usp_RunDataLoad] 1001,${{ vars.DATA_BUILD_PERIOD }},'Publish and Archive ML US Market','Publish MKT Record',${{ vars.BUILD_TIMEOUT }},1"


 # Job to Validate the Data Build
  validate:
    name: Validate Data Build
    needs: daytime-dataload
    if: ${{ needs.preparation.outputs.validation_enabled=='true' }}
    runs-on: self-hosted
    environment: ${{
      startsWith(fromJSON(github.event.inputs.parameters_json).source_branch, vars.BRANCH_STG1) && 'STG-1' ||
      startsWith(fromJSON(github.event.inputs.parameters_json).source_branch, vars.BRANCH_STG2) && 'STG-2' ||
      startsWith(fromJSON(github.event.inputs.parameters_json).source_branch, vars.BRANCH_STG3) && 'STG-3'
      }}
    steps:
      # Step to checkout DevOps repository source code from GitHub into the runner.
      - name: Checkout DevOps repository source code
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.DEVOPS_REPO }}
          token: ${{ secrets.DEVOPS_REPO_PAT }}
          path: ./devops-repo
          
      # Step to Run Regression Comparison for Daytime Firms
      - name: Run Regression Comparison for Daytime Firms
        shell: pwsh
        run: |
          echo '---' >> $env:GITHUB_STEP_SUMMARY
          echo '## Run Regression Comparison for Daytime Firms' >> $env:GITHUB_STEP_SUMMARY
          cd C:\temp\Automated-Databuild
          Install-Module -Name SqlServer -Force
          
          $jobFailed = $false
          $firms = '${{ vars.DAYTIME_FIRMS_TO_RUN }}'.Split(',')
          foreach ($firm in $firms) {
            $output = ./devops-repo/Automated-Databuild/ExecuteSQL.ps1 -sqlusername ${{ secrets.DEVOPS_SQL_DEPLOYACCT }} -sqlpassword ${{ secrets.DEVOPS_SQL_DEPLOYACCT_PAT }} -serverInstance '${{ vars.DATABASE_SERVER }}' -database "Blazon" -query "EXECUTE Test.usp_BuildRegression @idFirm = $firm, @successThreshold = ${{ vars.REGRESSION_THRESHOLD }}" -verbose 4>&1
            
            echo $output
            $FirmResultTitle = "### Firm $firm Result: "

            if ($output -match "passes the success threshold") {
              $FirmResultTitlePlusStatus = $FirmResultTitle + ":white_check_mark: Passed" 
            } elseif ($output -match "failed based on the success threshold") {
              $FirmResultTitlePlusStatus = $FirmResultTitle + ":exclamation: Failed"
            }

            echo $FirmResultTitlePlusStatus >> $env:GITHUB_STEP_SUMMARY
            echo '```' >> $env:GITHUB_STEP_SUMMARY
            echo "$output" >> $env:GITHUB_STEP_SUMMARY
            echo '```' >> $env:GITHUB_STEP_SUMMARY

            if ($FirmResultTitlePlusStatus -match "Failed") {
              $jobFailed = $true
            }
          }

          if ($jobFailed) {
            exit 1
          }

      # Step to Run Validation ETL
      - name: Run Validation ETL
        shell: pwsh
        run: ./devops-repo/Automated-Databuild/ExecuteJob.ps1 -username ${{ secrets.DEVOPS_DEPLOYACCT }} -password ${{ secrets.DEVOPS_DEPLOYACCT_PAT }} -jobName "Execute Validations" -serverInstance '${{ vars.DATABASE_SERVER }}'
